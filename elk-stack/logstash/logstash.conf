input {
  http {
    port => 8080
    ssl => true
    ssl_certificate => "/Users/rishi/book-management-api/elk-stack/certs/logstash.crt"
    ssl_key => "/Users/rishi/book-management-api/elk-stack/certs/logstash.key"
    codec => json
  }
}

filter {
  json {
    source => "message"
    target => "event"
    skip_on_invalid_json => true
  }

  if [event] {
    mutate {
      rename => { "[event][timestamp]" => "timestamp" }
      rename => { "[event][repo]" => "repo" }
      rename => { "[event][job]" => "job" }
      rename => { "[event][commit_sha]" => "commit_sha" }
      rename => { "[event][eslint_log_b64]" => "eslint_log_b64" }
      rename => { "[event][test_log_b64]" => "test_log_b64" }
      rename => { "[event][audit_log_b64]" => "audit_log_b64" }
    }

ruby {
  code => '
    require "base64"
    if event.get("eslint_log_b64")
      decoded = Base64.decode64(event.get("eslint_log_b64"))
      event.set("eslint_log", decoded[0..500])  # Trim long logs
    end
    if event.get("test_log_b64")
      decoded = Base64.decode64(event.get("test_log_b64"))
      event.set("test_log", decoded[0..500])
    end
    if event.get("audit_log_b64")
      decoded = Base64.decode64(event.get("audit_log_b64"))
      event.set("audit_log", decoded[0..500])
    end
  '
}

    date {
      match => ["timestamp", "ISO8601"]
      target => "@timestamp"
    }
  }
  mutate {
  remove_field => ["eslint_log_b64", "test_log_b64", "audit_log_b64"]
}
mutate {
  add_field => { "log_type" => "ci_pipeline" }
}
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "manual-logs-%{+YYYY.MM.dd}"
  }
  stdout { codec => rubydebug }
}